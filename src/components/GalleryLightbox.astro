---
// LightboxGallery.astro - Componente reutilizable
---

<!-- Lightbox Structure -->
<div class="lightbox" id="lightbox">
  <div class="lightbox-content">
    <button class="lightbox-close" id="lightbox-close">&times;</button>
    <button class="lightbox-nav lightbox-prev" id="lightbox-prev">&#8249;</button>
    <img class="lightbox-image" id="lightbox-image" alt="" />
    <button class="lightbox-nav lightbox-next" id="lightbox-next">&#8250;</button>
    <div class="lightbox-counter" id="lightbox-counter"></div>
  </div>
</div>

<style>
  /* Lightbox Styles */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .lightbox.active {
    opacity: 1;
    visibility: visible;
  }

  .lightbox-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
  }

  .lightbox-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    font-size: 24px;
    padding: 12px 16px;
    cursor: pointer;
    border-radius: 50%;
    transition: background-color 0.3s ease;
    backdrop-filter: blur(5px);
  }

  .lightbox-nav:hover {
    background-color: rgba(255, 255, 255, 0.3);
  }

  .lightbox-prev {
    left: -60px;
  }

  .lightbox-next {
    right: -60px;
  }

  .lightbox-close {
    position: absolute;
    top: -50px;
    right: -10px;
    background-color: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    font-size: 28px;
    padding: 8px 12px;
    cursor: pointer;
    border-radius: 50%;
    transition: background-color 0.3s ease;
    backdrop-filter: blur(5px);
  }

  .lightbox-close:hover {
    background-color: rgba(255, 255, 255, 0.3);
  }

  .lightbox-counter {
    position: absolute;
    bottom: -50px;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    background-color: rgba(0, 0, 0, 0.5);
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    backdrop-filter: blur(5px);
  }

  .gallery-image {
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .gallery-image:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  @media (max-width: 768px) {
    .lightbox-nav {
      font-size: 20px;
      padding: 10px 12px;
    }

    .lightbox-prev {
      left: -45px;
    }

    .lightbox-next {
      right: -45px;
    }

    .lightbox-close {
      top: -40px;
      right: -5px;
      font-size: 24px;
    }
  }
</style>

<script>
  class GalleryLightbox {
    images;
    lightbox;
    lightboxImage;
    lightboxClose;
    lightboxPrev;
    lightboxNext;
    lightboxCounter;
    currentIndex;

    constructor() {
      this.images = document.querySelectorAll(".gallery-image");
      this.lightbox = document.getElementById("lightbox");
      this.lightboxImage = document.getElementById("lightbox-image");
      this.lightboxClose = document.getElementById("lightbox-close");
      this.lightboxPrev = document.getElementById("lightbox-prev");
      this.lightboxNext = document.getElementById("lightbox-next");
      this.lightboxCounter = document.getElementById("lightbox-counter");
      this.currentIndex = 0;

      this.init();
    }

    init() {
      // Agregar event listeners a cada imagen
      this.images.forEach((img, index) => {
        img.addEventListener("click", () => this.openLightbox(index));
      });

      // Event listeners para controles del lightbox (con null checks)
      if (this.lightboxClose) {
        this.lightboxClose.addEventListener("click", () =>
          this.closeLightbox(),
        );
      }
      if (this.lightboxPrev) {
        this.lightboxPrev.addEventListener("click", () => this.prevImage());
      }
      if (this.lightboxNext) {
        this.lightboxNext.addEventListener("click", () => this.nextImage());
      }

      // Cerrar lightbox al hacer click en el fondo
      if (this.lightbox) {
        this.lightbox.addEventListener("click", (e) => {
          if (e.target === this.lightbox) {
            this.closeLightbox();
          }
        });
      }

      // Navegación con teclado
      document.addEventListener("keydown", (e) => {
        if (this.lightbox && this.lightbox.classList.contains("active")) {
          switch (e.key) {
            case "Escape":
              this.closeLightbox();
              break;
            case "ArrowLeft":
              this.prevImage();
              break;
            case "ArrowRight":
              this.nextImage();
              break;
          }
        }
      });
    }

    openLightbox(index: number) {
      this.currentIndex = index;
      this.updateImage();
      if (this.lightbox) {
        this.lightbox.classList.add("active");
      }
      document.body.style.overflow = "hidden"; // Prevenir scroll
    }

    closeLightbox() {
      if (this.lightbox) {
        this.lightbox.classList.remove("active");
      }
      document.body.style.overflow = ""; // Restaurar scroll
    }

    prevImage() {
      this.currentIndex =
        (this.currentIndex - 1 + this.images.length) % this.images.length;
      this.updateImage();
    }

    nextImage() {
      this.currentIndex = (this.currentIndex + 1) % this.images.length;
      this.updateImage();
    }

    updateImage() {
      const currentImg = this.images[this.currentIndex] as HTMLImageElement;
      const lightboxImg = this.lightboxImage as HTMLImageElement;
      if (lightboxImg && currentImg) {
        lightboxImg.src = currentImg.src;
        lightboxImg.alt = currentImg.alt;
      }
      if (this.lightboxCounter) {
        this.lightboxCounter.textContent = `${this.currentIndex + 1} / ${this.images.length}`;
      }
    }
  }

  // Inicializar la galería cuando se carga la página
  document.addEventListener("DOMContentLoaded", () => {
    new GalleryLightbox();
  });
</script>
